name: Manual Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag (e.g. 1.2.3)"
        required: true
      latest:
        description: "Also tag 'latest'? (true/false)"
        required: false
        default: "true"

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        id: tests
        run: |
          start=$(date +%s)
          # Run tests and tee output for parsing; keep exit code
          set -o pipefail
          npm test 2>&1 | tee tests.out
          status=$?
          end=$(date +%s)
          duration=$((end-start))
          # Parse vitest v3 summary lines (tolerant). Avoid failing if grep finds nothing.
          set +o pipefail
          total=$(grep -Eo '^[[:space:]]*Tests[[:space:]]+[0-9]+' tests.out | awk '{print $2}' | tail -n1 || true)
          passed=$(grep -Eo '^[[:space:]]*Tests[[:space:]]+[0-9]+[[:space:]]+passed' tests.out | awk '{print $2}' | tail -n1 || true)
          failed=$(grep -Eo '^[[:space:]]*Tests[[:space:]]+[0-9]+[[:space:]]+failed' tests.out | awk '{print $2}' | tail -n1 || true)
          files=$(grep -Eo '^[[:space:]]*Test Files[[:space:]]+[0-9]+' tests.out | awk '{print $3}' | tail -n1 || true)
          # Fallback math when lines vary: if failed is empty and total exists, assume all passed
          if [ -z "$failed" ] && [ -n "$total" ]; then
            failed=0
          fi
          if [ -z "$passed" ] && [ -n "$total" ] && [ -n "$failed" ]; then
            passed=$((total - failed))
          fi
          echo "### Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Files: ${files:-unknown}" >> $GITHUB_STEP_SUMMARY
          echo "- Total: ${total:-unknown}" >> $GITHUB_STEP_SUMMARY
          echo "- Passed: ${passed:-0}" >> $GITHUB_STEP_SUMMARY
          echo "- Failed: ${failed:-0}" >> $GITHUB_STEP_SUMMARY
          echo "- Duration: ${duration}s" >> $GITHUB_STEP_SUMMARY
          exit $status

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare tags
        id: prep
        run: |
          VERSION_INPUT=${{ github.event.inputs.version }}
          if [[ ! $VERSION_INPUT =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Version must be semantic (x.y.z)" >&2
            exit 1
          fi
          echo "VERSION=$VERSION_INPUT" >> $GITHUB_OUTPUT
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION_INPUT}"
          if [[ '${{ github.event.inputs.latest }}' == 'true' ]]; then
            TAGS+=",${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          fi
          echo "TAGS=$TAGS" >> $GITHUB_OUTPUT

      - name: Set build metadata
        id: meta
        run: |
          echo "CREATED=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Build and push (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.prep.outputs.TAGS }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prep.outputs.VERSION }}
            org.opencontainers.image.created=${{ steps.meta.outputs.CREATED }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Summary
        run: |
          echo "Pushed tags: ${{ steps.prep.outputs.TAGS }}" >> $GITHUB_STEP_SUMMARY
